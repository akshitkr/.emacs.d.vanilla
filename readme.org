#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

.emacs.d.vanilla 
  my non doom emacs config
** general settings
*** package management
    i use straight now 
**** straight
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file (expand-file-name "straight/repos/straight.el/bootstrap.el"
					user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer (url-retrieve-synchronously "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
						     'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

#+end_src
**** init use-package
a better require
#+begin_src emacs-lisp

(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
(setq use-package-always-ensure t)

#+end_src
*** TODO neotree
vim inspired but useful ;;
#+begin_src emacs-lisp
(use-package neotree
  :config (setq neo-theme (if (display-graphic-p)
			      'icons
			    'arrow))(setq neo-smart-open t))


(use-package all-the-icons)

#+end_src
*** TODO theme
    i use doom themes with doom modeline
#+begin_src emacs-lisp
;; from https://github.com/hlissner/emacs-doom-themes
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (doom-themes-treemacs-config)
  
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
  
(use-package doom-modeline
  :ensure t
  :config
 (setq doom-modeline-height 15)
  :init (doom-modeline-mode 1)
  
  )

#+end_src
*** TODO undo-tree
*** TODO org
the mode in which this file is written, i use org mode for this config
#+begin_src emacs-lisp
  (require 'org-tempo) ; useful org shortcuts
  (setq org-ellipsis "â¤µ")

  (use-package org-bullets)
  (add-hook 'org-mode-hook 'org-bullets-mode)
  (org-bullets-mode)
  (setq org-directory "~/Documents/orgfiles")

  ;; org capture
  (setq org-default-notes-file (concat org-directory "~/Documents/orgfiles/notes.org"))



   (setq org-capture-templates
	  '(("n" "Note" entry (file+headline "~/Documents/orgfiles/notes.org" "Notes")
	     "* Note %?\n%T")
	    ("l" "Link" entry (file+headline "~/Documents/orgfiles/links.org" "Links")
	     "* %? %^L %^g \n%T" :prepend t)
	    ("b" "Blog idea" entry (file+headline "~/Documents/orgfiles/i.org" "Blog Topics:")
	     "* %?\n%T" :prepend t)
	    ("t" "To Do Item" entry (file+headline "~/Documents/orgfiles/i.org" "To Do Items")
	     "* %?\n%T" :prepend t)
	    ))

  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c C-c") 'org-capture)
#+end_src
*** visual tweaks
basic tweaks to make the setup more minimal
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(set-fringe-mode 10)
(menu-bar-mode -1)

;; fullscreen causes weird child windows issues
(toggle-frame-maximized)

;; hate the default
(setq initial-scratch-message ";; good mornign")
;; organise backups
(setq backup-directory-alist '(("." . "~/.config/emacs/backups")))
#+end_src
*** bell enhancements
edit default ring bell to blink mode line instead
#+begin_src emacs-lisp
(setq visible-bell nil)
#+end_src

*** font
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Iosevka"
		    :height 150)
#+end_src
*** vim keybindings
#+BEGIN_QUOTE
vi vi vi, editor of the beast no
#+END_QUOTE
no.
#+begin_src emacs-lisp

(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))

#+end_src
*** command-logs
nothing much
#+begin_src emacs-lisp
(use-package command-log-mode)

#+end_src
*** counsel commands
reject tradition embrace modernivy
#+begin_src emacs-lisp
  (use-package counsel
    :bind* ; load when pressed ("M-x"     . counsel-M-x)
    ("C-x C-r" . counsel-recentf)  ; search for recently edited
    ("C-s" . swiper)
    ("s-f" . swiper)
    ("C-x C-f" . counsel-find-file)
    ("C-c g" . counsel-git)      ; search for files in git repo
    ("C-c j" . counsel-git-grep) ; search for regexp in git repo
    ("C-x b" . counsel-switch-buffer)
    ("C-x C-b" . counsel-switch-buffer) ; if i accidently type
    ("C-c /" . counsel-ag)       ; Use ag for regexp
    ("C-x l" . counsel-locate)
    ("<f1> f" . counsel-describe-function)
    ("<f1> v" . counsel-describe-variable)
    ("<f1> l" . counsel-find-library)
    ("<f2> i" . counsel-info-lookup-symbol)
    ("M-x" . counsel-M-x)
  )

#+end_src
*** Ivy
completion for love and life 
simpler and faster than helm
#+begin_src emacs-lisp
(use-package ivy
  :diminish (ivy-mode . ""):init
  (ivy-mode 1) ; globally at startup
  :config (setq ivy-use-virtual-buffers t)(setq ivy-height 10)(setq ivy-count-format "%d/%d "))

;; sublime like postframe

(use-package ivy-posframe)

;; Different command can use different display function.
(setq ivy-posframe-display-functions-alist
      '((complete-symbol          . ivy-posframe-display-at-point)
        (t               . ivy-posframe-display)))
(ivy-posframe-mode 1)
(setq ivy-posframe-parameters
      '((left-fringe . 8)
        (right-fringe . 8)))

;; show desc
(use-package ivy-rich)
(ivy-rich-mode 1)

(setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
#+end_src
*** smartparens
hm, lisp
#+begin_src emacs-lisp
(use-package smartparens
  :config (require 'smartparens-config)(add-hook 'lisp-mode-hook #'smartparens-strict-mode))


#+end_src
*** sorting and filtering 
almost magical
#+begin_src emacs-lisp
(use-package ivy-prescient
  :after counsel
  :config (prescient-persist-mode 1)(ivy-prescient-mode 1)(message "prescient loaded"))
#+end_src
*** windmove
shift + arrows to move around buffers, very convenient
#+begin_src emacs-lisp
  (windmove-default-keybindings)

  

#+end_src
*** auto completion
i use company because its more popular and has a better API
#+begin_src emacs-lisp
(use-package company
  :init (add-hook 'after-init-hook 'global-company-mode))
#+end_src
for auto-complete like documentation
#+begin_src emacs-lisp
  ;; (use-package company-quickhelp
  ;;   :after company
  ;;   :config (company-quickhelp-mode))
 
  (use-package company-posframe
    :after company)
    (company-posframe-mode 1)

#+end_src
*** eldoc
    not sure what this does, let me eldoc this
#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'eldoc-mode)
  (add-hook 'ielm-mode-hook 'eldoc-mode)
  (add-hook 'python-mode-hook 'eldoc-mode)
#+end_src
*** flycheck
on the fly checking, better than flymake imo
#+begin_src emacs-lisp
(use-package flycheck)
(add-hook 'after-init-hook #'global-flycheck-mode)
#+end_src
*** smooth scroll
unless you like living in the 70s
#+begin_src emacs-lisp
(use-package smooth-scrolling
  :init (smooth-scrolling-mode 1))

#+end_src
*** which-key
shows possible completions in the buffer after keystrokes
#+begin_src emacs-lisp
(use-package which-key)
(which-key-mode)
#+end_src
*** make ESC quit prompts
    not sure why this is a heading 
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>")
		'keyboard-escape-quit)

#+end_src
*** magit
probably the perfect git client to exist
#+begin_src emacs-lisp
(use-package magit)
#+end_src
*** projectile
quick project navigation
#+begin_src emacs-lisp
(use-package projectile
  :config
  :bind (("s-p" . projectile-command-map)
	 ("C-c f" . projectile-find-file-hook))
  )

(projectile-mode 1)
#+end_src
*** colored parens
lots of irritating superfluous parentheses
#+begin_src emacs-lisp
(use-package rainbow-delimiters) ;rainbow uwu
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

#+end_src
*** term
    #+begin_src emacs-lisp
    (use-package vterm)
    
    #+end_src
*** electric-pair
    #+begin_src emacs-lisp
      (electric-pair-mode)

    #+end_src
*** diff hl
 #+begin_src emacs-lisp
      (use-package diff-hl)
      (global-diff-hl-mode)

      (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
      (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
      (fringe-mode 8)
    #+end_src
    
*** undo-tree
   
    #+begin_src emacs-lisp
      (use-package undo-tree)
      (global-undo-tree-mode)
    #+end_src
*** flyspell
    #+begin_src emacs-lisp
    ;;https://www.tenderisthebyte.com/blog/2019/06/09/spell-checking-emacs/
 (dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))
(eval-after-load "flyspell"
  '(progn
     (define-key flyspell-mouse-map [down-mouse-3] 'flyspell-correct-word)
     (define-key flyspell-mouse-map [mouse-3] 'undefined)))
    
    #+end_src
 
    
** language specific settings 
*** lsp
    #+begin_src emacs-lisp
	  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
      (setq lsp-keymap-prefix "s-l")

      (use-package lsp-mode
	  :commands lsp)

      ;; optionally
      (use-package lsp-ui :commands lsp-ui-mode)
      ;;ivy
      (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)

      ;; default very low
      (setq read-process-output-max (* 1024 1024))

      (add-hook 'c-mode-hook 'lsp)
      (add-hook 'c++-mode-hook 'lsp)

    #+end_src
*** TODO eglot
planing to use eglot for c++ and rust
#+begin_src emacs-lisp
(use-package eglot)
(add-to-list 'eglot-server-programs
	     '((c++-mode c-mode) "clangd"))
(add-hook 'c-mode-hook 'eglot-ensure)

#+end_src

*** python
elpy is probably the perfect python environment, minimal and nimble.
#+begin_src emacs-lisp

  (use-package pyenv-mode)
  (use-package elpy
    :ensure t
    :init
    (elpy-enable)
    :config
    (pyenv-mode))

  ;; use flycheck instead of flymake
  (when (load "flycheck" t t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))

  ;; autoformat on save
  (add-hook 'elpy-mode-hook
	    (lambda ()
	      (add-hook 'before-save-hook 'elpy-format-code
			nil t)))
  (define-key yas-minor-mode-map (kbd "C-c k") 'yas-expand)
  (define-key global-map (kbd "C-c o") 'iedit-mode)		  

  (setq elpy-rpc-virtualenv-path 'default)
  (setq elpy-rpc-python-command "python3")

#+end_src

*** sml 
    #+begin_src emacs-lisp
    (use-package sml-mode)
    #+end_src
(setenv "PATH" (concat "/usr/local/smlnj/bin:" (getenv "PATH")))
(setq exec-path (cons "/usr/local/smlnj/bin"  exec-path))

*** javascript-typescript
    i use the excellent TIDE mode
#+begin_src emacs-lisp
  (use-package js2-mode)
  (use-package typescript-mode)
  (use-package web-mode)
  (use-package tide)
  (use-package json-mode)

  (use-package rjsx-mode)
  ;; better js
  (add-to-list 'auto-mode-alist '("\\.js.*$" . rjsx-mode))
  (add-to-list 'auto-mode-alist '("\\.json$" . json-mode))

  ;; from https://github.com/ananthakumaran/tide
  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    (company-mode +1))

  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)

  (setq tide-format-options '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t :placeOpenBraceOnNewLineForFunctions nil))

  (add-hook 'js-mode-hook #'setup-tide-mode)
  (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append)

  (add-hook 'web-mode-hook
	    (lambda ()
	      (when (string-equal "jsx" (file-name-extension buffer-file-name))
		(setup-tide-mode))))

  ;; configure jsx-tide checker to run after your default jsx checker
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  (flycheck-add-next-checker 'javascript-eslint 'jsx-tide 'append)

  (use-package tide
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
	   (typescript-mode . tide-hl-identifier-mode)
	   (before-save . tide-format-before-save)))

;; vue
(use-package vue-mode)
(use-package vue-mode
  :mode "\\.vue\\'"
  :hook (vue-mode . prettier-js-mode)
  :config
  (add-hook 'vue-mode-hook #'lsp)
  (setq prettier-js-args '("--parser vue")))

#+end_src

